{"version":3,"sources":["views/management/Setting/Header.js","views/management/Setting/Results.js","views/management/Setting/index.js"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","actionIcon","marginRight","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Box","mt","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","height","mailColor","textDecoration","text","primary","appBar","flexGrow","paper","input","display","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","p","a11yProps","config","region","accessKeyId","secretAccessKey","signatureVersion","Results","admin","staff","updateStaff","deleteStaff","React","useState","setValue","GeneratedAccount","setGeneratedAccount","enqueueSnackbar","useSnackbar","imageUpload","setImageUpload","randomBytes","promisify","crypto","s3","aws","S3","GenerateAccount","rawBytes","imageName","toString","params","Bucket","Key","Expires","getSignedUrlPromise","uploadUrl","fetch","method","headers","body","imageUrl","split","AdminService","generateAccount","profilePicture","then","res","data","catch","err","console","log","Card","Divider","minHeight","alignItems","minWidth","AppBar","Tabs","onChange","event","newValue","Tab","label","initialValues","username","email","firstName","lastName","password","validationSchema","Yup","shape","required","onSubmit","values","setErrors","setStatus","setSubmitting","filename","pop","deleteObject","promise","newObject","adminId","updateAdmin","window","location","reload","errors","handleBlur","handleChange","handleSubmit","touched","isSubmitting","accept","target","files","type","htmlFor","IconButton","name","TextField","error","Boolean","helperText","fullWidth","onBlur","placeholder","submit","FormHelperText","Button","orignalPass","onClick","navigator","clipboard","writeText","Table","table","TableHead","TableRow","TableCell","TableBody","map","row","hover","key","_id","SvgIcon","defaultProps","customers","dark","paddingTop","paddingBottom","textDiv","UserListView","setStaff","useSelector","state","account","user","useEffect","getStaff","Page","title","Container","maxWidth","staffId","justifyContent"],"mappings":";iWAsBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,GACNC,OAAQ,CACNC,aAAcH,EAAMI,QAAQ,GAC5B,QAAS,CACPC,WAAYL,EAAMI,QAAQ,KAG9BE,WAAY,CACVC,YAAaP,EAAMI,QAAQ,QA4ChBI,MAxCf,YAAyC,IAAvBC,EAAsB,EAAtBA,UAAcC,EAAQ,iBAChCC,EAAUb,IAGhB,OACE,kBAACc,EAAA,EAAD,eACEH,UAAWI,YAAKF,EAAQV,KAAMQ,GAC9BK,WAAS,EACTC,QAAQ,gBACRX,QAAS,GACLM,GAEJ,kBAACE,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CACEC,UAAW,kBAAC,IAAD,CAAkBC,SAAS,UACtCC,aAAW,cAEX,kBAACC,EAAA,EAAD,CAAMC,QAAQ,QAAQC,MAAM,UAAUC,GAAG,IAAIC,UAAWC,KAAxD,aAGA,kBAACL,EAAA,EAAD,CAAMC,QAAQ,QAAQC,MAAM,UAAUC,GAAG,IAAIC,UAAWC,KAAxD,cAGA,kBAACC,EAAA,EAAD,CAAYL,QAAQ,QAAQC,MAAM,eAAlC,YAIF,kBAACI,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,eAA/B,WAGA,kBAACK,EAAA,EAAD,CAAKC,GAAI,O,irNC3BjB,IAAM/B,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,GACN6B,WAAY,CACVC,MAAO,KAETC,eAAgB,CACdC,SAAU,YAEZC,YAAa,CACXC,YAAa,EACbC,aAAc,EACdC,UAAW,EACXJ,SAAU,WACVF,MAAO,OACPO,OAAQ,EACRC,gBAAiBvC,EAAMwC,QAAQC,WAAWC,SAE5CC,WAAY,CACVtC,WAAYL,EAAMI,QAAQ,IAE5BwC,OAAQ,CACNC,OAAQ,GACRd,MAAO,GACPxB,YAAaP,EAAMI,QAAQ,IAE7B0C,UAAU,CACRC,eAAgB,OAChBxB,MAAOvB,EAAMwC,QAAQQ,KAAKC,SAE5BC,OAAQ,CACNC,SAAU,EACVZ,gBAAiBvC,EAAMwC,QAAQC,WAAWW,OAE5CC,MAAO,CACLC,QAAS,YAIb,SAASC,GAASC,GAChB,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EAAnC,YAA6CJ,EAA7C,GAEA,OACE,uCACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,0BAAqBJ,GACvBK,kBAAA,qBAA+BL,IAC3BC,GAEHF,IAAUC,GACT,kBAAC/B,EAAA,EAAD,CAAKqC,EAAG,GACN,kBAACtC,EAAA,EAAD,KAAa8B,KAavB,SAASS,GAAUP,GACjB,MAAO,CACLI,GAAG,cAAD,OAAgBJ,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAAMQ,GAAS,CACbC,OAAQ,YACRC,YAAa,uBACbC,gBAAiB,2CACjBC,iBAAkB,MAIpB,SAASC,GAAT,GAAkF,IAA/D/D,EAA8D,EAA9DA,UAAWgE,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,YAAgBlE,EAAQ,kBAEzEC,EAAUb,KAChB,EAA0B+E,IAAMC,SAAS,GAAzC,mBAAOpB,EAAP,KAAcqB,EAAd,KACA,EAAgDF,IAAMC,SAAS,MAA/D,mBAAOE,EAAP,KAAyBC,EAAzB,KACQC,EAAoBC,cAApBD,gBACR,EAAsCJ,mBAAS,MAA/C,mBAAOM,EAAP,KAAoBC,GAApB,KACMC,GAAcC,oBAAUC,IAAOF,aAC/BG,GAAK,IAAIC,IAAIC,GAAGxB,IAOhByB,GAAe,wCAAG,iGAEnBR,EAFmB,iCAIGE,GAAY,IAJf,cAIdO,EAJc,OAKdC,EAAYD,EAASE,SAAS,OAE9BC,EAAU,CACdC,OAAQ,eACRC,IAAKJ,EACLK,QAAS,IAVS,SAaIV,GAAGW,oBAAoB,YAAaJ,GAbxC,cAadK,EAbc,iBAedC,MAAMD,EAAW,CACrBE,OAAQ,MACRC,QAAS,CACP,eAAgB,uBAElBC,KAAMrB,IApBY,QAuBdsB,EAAWL,EAAUM,MAAM,KAAK,GAEtCC,IAAaC,gBAAgB,CAACC,eAAgBJ,IAAWK,MAAK,SAAAC,GAE5D/B,EAAoB+B,EAAIC,MACxBtC,OACCuC,OAAM,SAAAC,GACPC,QAAQC,IAAIF,MA9BM,wBAiCpBjC,EAAgB,kDAAmD,CACjE5D,QAAS,UAlCS,4CAAH,qDAwCrB,OACE,kBAACgG,EAAA,EAAD,eAAM7G,UAAWI,YAAKF,EAAQV,KAAMQ,IAAgBC,GAClD,kBAAC6G,EAAA,EAAD,MAEA,kBAAC3F,EAAA,EAAD,CAAKqC,EAAG,EAAGuD,UAAW,GAAIlE,QAAQ,OAAOmE,WAAW,UAClD,kBAAC7F,EAAA,EAAD,CAAKuB,SAAU,KAGjB,kBAAC,IAAD,KACE,kBAACvB,EAAA,EAAD,CAAKnB,UAAWE,EAAQuC,OAAQwE,SAAU,KACxC,kBAACC,EAAA,EAAD,CAAQ1F,SAAS,UACf,kBAAC2F,EAAA,EAAD,CAAMlE,MAAOA,EAAOmE,SAxDT,SAACC,EAAOC,GAC3B1C,GAAe,MACfN,EAASgD,IAsD2C3G,aAAW,uBACrD,kBAAC4G,EAAA,EAAD,eAAKC,MAAM,cAAiB/D,GAAU,KACtC,kBAAC8D,EAAA,EAAD,eAAKC,MAAM,oBAAuB/D,GAAU,KAC5C,kBAAC8D,EAAA,EAAD,eAAKC,MAAM,kBAAqB/D,GAAU,OAG9C,kBAACX,GAAD,CAAUG,MAAOA,EAAOC,MAAO,GAC7B,kBAAC,IAAD,CACEuE,cAAe,CACbC,SAAQ,OAAE1D,QAAF,IAAEA,OAAF,EAAEA,EAAO0D,SACjBC,MAAK,OAAE3D,QAAF,IAAEA,OAAF,EAAEA,EAAO2D,MACdC,UAAS,OAAE5D,QAAF,IAAEA,OAAF,EAAEA,EAAO4D,UAClBC,SAAQ,OAAE7D,QAAF,IAAEA,OAAF,EAAEA,EAAO6D,SACjBC,SAAU,IAEZC,iBAAkBC,MAAaC,MAAM,CACnCP,SAAUM,MAAaE,WACvBP,MAAOK,MAAaE,WACpBN,UAAWI,MAAaE,WACxBL,SAAUG,MAAaE,aAEzBC,SAAQ,wCAAE,WAAOC,EAAP,8FAAiBC,UAAjB,EAA4BC,UAAWC,EAAvC,EAAuCA,cAAvC,SAGNA,GAAc,GAEVtC,EAAW,IAEZtB,EAPG,oBAWY,MAFZ6D,EAAWxE,EAAMqC,eAAeH,MAAM,KAAKuC,OAT3C,gCAYIzD,GAAG0D,aAAa,CAAClD,OAAQ,eAAgBC,IAAK+C,IAAWG,UAZ7D,wBAemB9D,GAAY,IAf/B,eAeEO,EAfF,OAgBEC,EAAYD,EAASE,SAAS,OAE9BC,EAAU,CACdC,OAAQ,eACRC,IAAKJ,EACLK,QAAS,IArBP,UAwBoBV,GAAGW,oBAAoB,YAAaJ,GAxBxD,eAwBEK,EAxBF,iBA0BEC,MAAMD,EAAW,CACrBE,OAAQ,MACRC,QAAS,CACP,eAAgB,uBAElBC,KAAMrB,IA/BJ,QAkCJsB,EAAWL,EAAUM,MAAM,KAAK,GAlC5B,QAqCA0C,EAAY,CAChBC,QAAS7E,EAAMV,GACfoE,SAAUU,EAAOV,SACjBC,MAAOS,EAAOT,MACdC,UAAWQ,EAAOR,UAClBC,SAAUO,EAAOP,SACjBC,SAAUM,EAAON,SACjBzB,eAAgBJ,GAGdmC,EAAOV,WAAa1D,EAAM0D,UAAYU,EAAOT,QAAU3D,EAAM2D,OAC7DS,EAAOR,YAAc5D,EAAM4D,WAAaQ,EAAOP,WAAa7D,EAAM6D,UAC9C,KAApBO,EAAON,UAAmBnD,EAExBwB,IAAa2C,YAAYF,GAAWtC,MAAK,SAAAC,GACvC9B,EAAgB,+BAAgC,CAC9C5D,QAAS,YAEXkI,OAAOC,SAASC,YACfxC,OAAM,SAAAC,GACPC,QAAQC,IAAIF,GACZjC,EAAgB,+BAAgC,CAC9C5D,QAAS,aAIjB4D,EAAgB,sBAAuB,CACrC5D,QAAS,UAhEP,kDAsEN8F,QAAQC,IAAR,MACA2B,GAAc,GAvER,0DAAF,0DA6EP,gBACCW,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aAEAC,GAND,EAKCC,aALD,EAMCD,SACAlB,EAPD,EAOCA,OAPD,OASC,wCACED,SAAUkB,EACVrJ,UAAWI,YAAKF,EAAQV,KAAMQ,IAC1BC,GAEJ,kBAACkB,EAAA,EAAD,CAAK8F,SAAU,IAAMpE,QAAQ,QAC3B,kBAAC1B,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,2BAAOgG,OAAO,UAAUpC,SAAU,SAACC,GAAYzC,GAAeyC,EAAMoC,OAAOC,MAAM,KAAM1J,UAAWE,EAAQ0C,MAAOU,GAAG,cAAcqG,KAAK,SACvI,2BAAOC,QAAQ,eACb,kBAACC,EAAA,EAAD,CAAY/I,MAAM,UAAUH,aAAW,iBAAiBK,UAAU,QAChE,kBAAC,IAAD,OAEA2D,GAAeA,EAAYmF,MAAS9F,EAAMqC,kBAKlD,kBAAClF,EAAA,EAAD,CAAK8F,SAAU,IAAMpE,QAAQ,QAC3B,kBAAC1B,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,kBAACuG,EAAA,EAAD,CACEC,MAAOC,QACLX,EAAQ5B,UAAYwB,EAAOxB,UAE7BwC,WAAYZ,EAAQ5B,UAAYwB,EAAOxB,SACvCyC,WAAS,EACT3C,MAAM,WACNsC,KAAK,WACL1C,SAAUgC,EACVgB,OAAQjB,EACRlG,MAAOmF,EAAOV,SACd7G,QAAQ,cAIZ,kBAACM,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,kBAACuG,EAAA,EAAD,CACEC,MAAOC,QACLX,EAAQ3B,OAASuB,EAAOvB,OAE1BuC,WAAYZ,EAAQ3B,OAASuB,EAAOvB,MACpCwC,WAAS,EACT3C,MAAM,QACNsC,KAAK,QACL1C,SAAUgC,EACVgB,OAAQjB,EACRlG,MAAOmF,EAAOT,MACd9G,QAAQ,eAKd,kBAACM,EAAA,EAAD,CAAK8F,SAAU,IAAMpE,QAAQ,QAC3B,kBAAC1B,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,kBAACuG,EAAA,EAAD,CACEC,MAAOC,QACLX,EAAQ1B,WAAasB,EAAOtB,WAE9BsC,WAAYZ,EAAQ1B,WAAasB,EAAOtB,UACxCuC,WAAS,EACT3C,MAAM,aACNsC,KAAK,YACL1C,SAAUgC,EACVgB,OAAQjB,EACRlG,MAAOmF,EAAOR,UACd/G,QAAQ,cAIZ,kBAACM,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,kBAACuG,EAAA,EAAD,CACEC,MAAOC,QACLX,EAAQzB,UAAYqB,EAAOrB,UAE7BqC,WAAYZ,EAAQzB,UAAYqB,EAAOrB,SACvCsC,WAAS,EACT3C,MAAM,YACNsC,KAAK,WACL1C,SAAUgC,EACVgB,OAAQjB,EACRlG,MAAOmF,EAAOP,SACdhH,QAAQ,eAKd,kBAACM,EAAA,EAAD,CAAK8F,SAAU,IAAMpE,QAAQ,QAC3B,kBAAC1B,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,kBAACuG,EAAA,EAAD,CACEC,MAAOC,QACLX,EAAQxB,UAAYoB,EAAOpB,UAE7BoC,WAAYZ,EAAQxB,UAAYoB,EAAOpB,SACvCqC,WAAS,EACT3C,MAAM,WACNsC,KAAK,WACL1C,SAAUgC,EACVgB,OAAQjB,EACRlG,MAAOmF,EAAON,SACdjH,QAAQ,WACRwJ,YAAY,wBAIjBnB,EAAOoB,QACN,kBAACnJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACmJ,EAAA,EAAD,CAAgBP,OAAK,GAAEd,EAAOoB,SAGlC,kBAACnJ,EAAA,EAAD,CAAKqC,EAAG,GACN,kBAACgH,EAAA,EAAD,CACE1J,MAAM,YACND,QAAQ,YACR8I,KAAK,UAHP,gBAYV,kBAAC7G,GAAD,CAAUG,MAAOA,EAAOC,MAAO,GAE3BqB,GAAoB,kBAACpD,EAAA,EAAD,CAAKqC,EAAG,GAC5B,kBAACtC,EAAA,EAAD,sBACiBqD,EAAiBnB,MAElC,kBAAClC,EAAA,EAAD,eACUqD,EAAiBoD,OAE3B,kBAACzG,EAAA,EAAD,kBACaqD,EAAiBkG,aAG9B,kBAACtJ,EAAA,EAAD,CAAKqC,EAAG,GACN,kBAACgH,EAAA,EAAD,CACE1J,MAAM,YACND,QAAQ,WACR6J,QAAS,WACPC,UAAUC,UAAUC,UAApB,UAAiCtG,EAAiBoD,MAAlD,YAA2DpD,EAAiBkG,cAC5EhG,EAAgB,sBAAuB,CACrC5D,QAAS,cANf,UAgBJ,kBAACM,EAAA,EAAD,CAAK8F,SAAU,IAAMpE,QAAQ,QAC3B,kBAAC1B,EAAA,EAAD,CAAK8F,SAAU,IAAKzD,EAAG,GACrB,2BAAOgG,OAAO,UAAUpC,SAAU,SAACC,GAAYzC,GAAeyC,EAAMoC,OAAOC,MAAM,KAAM1J,UAAWE,EAAQ0C,MAAOU,GAAG,cAAcqG,KAAK,SACvI,2BAAOC,QAAQ,eACb,kBAACC,EAAA,EAAD,CAAY/I,MAAM,UAAUH,aAAW,iBAAiBK,UAAU,QAChE,kBAAC,IAAD,OAED2D,GAAeA,EAAYmF,QAKlC,kBAACU,EAAA,EAAD,CACE1J,MAAM,YACND,QAAQ,YACR6J,QAASvF,IAHX,qBAQF,kBAACrC,GAAD,CAAUG,MAAOA,EAAOC,MAAO,GAC/B,kBAAC4H,EAAA,EAAD,CAAO9K,UAAWE,EAAQ6K,MAAOpK,aAAW,gBAC1C,kBAACqK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,iBAGJ,kBAACC,EAAA,EAAD,KACGlH,EAAMmH,KAAI,SAACC,GAAD,OACT,kBAACJ,EAAA,EAAD,CAAUK,OAAK,EAACC,IAAG,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAKG,KACxB,kBAACN,EAAA,EAAD,YAAYG,QAAZ,IAAYA,OAAZ,EAAYA,EAAK1D,OACjB,kBAACuD,EAAA,EAAD,YAAYG,QAAZ,IAAYA,OAAZ,EAAYA,EAAKZ,aACjB,kBAACS,EAAA,EAAD,YAAYG,QAAZ,IAAYA,OAAZ,EAAYA,EAAKjI,MACjB,kBAAC8H,EAAA,EAAD,KACE,kBAACrB,EAAA,EAAD,CACAa,QAAS,WACPC,UAAUC,UAAUC,UAApB,iBAAiCQ,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAK1D,MAAtC,mBAA+C0D,QAA/C,IAA+CA,OAA/C,EAA+CA,EAAKZ,cACpDhG,EAAgB,sBAAuB,CACrC5D,QAAS,cAGX,kBAAC4K,EAAA,EAAD,CAAS/K,SAAS,SAChB,kBAAC,IAAD,SAIN,kBAACwK,EAAA,EAAD,KACE,kBAACrB,EAAA,EAAD,CAAYa,QAAS,WAAOvG,EAAW,OAACkH,QAAD,IAACA,OAAD,EAACA,EAAKG,OAC3C,kBAACC,EAAA,EAAD,CAAS/K,SAAS,SAChB,kBAAC,IAAD,mBAoBxBqD,GAAQ2H,aAAe,CACrBC,UAAW,IAGE5H,U,SC5fT1E,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJsC,gBAAiBvC,EAAMwC,QAAQC,WAAW4J,KAC1C7E,UAAW,OACX8E,WAAYtM,EAAMI,QAAQ,GAC1BmM,cAAevM,EAAMI,QAAQ,IAG/BoM,QAAS,CACPjL,MAAOvB,EAAMwC,QAAQQ,KAAKC,aA8DfwJ,UA1Df,WACE,IAAM9L,EAAUb,KAChB,EAA0BgF,mBAAS,MAAnC,mBAAOJ,EAAP,KAAcgI,EAAd,KACQxH,EAAoBC,cAApBD,gBACFT,EAAQkI,cAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,QA6BjD,OA1BAC,qBAAU,WACU,UAAftI,EAAMZ,MACP+C,IAAaoG,WAAWjG,MAAK,SAAAC,GAC3B0F,EAAS1F,EAAIC,WAGhB,CAACxC,IAqBF,kBAACwI,EAAA,EAAD,CAAMxM,UAAWE,EAAQV,KAAMiN,MAAM,iBACnC,kBAACC,EAAA,EAAD,CAAWC,UAAU,GACnB,kBAAC,EAAD,MAEoB,UAAlB3I,EAAK,KACL,kBAAC7C,EAAA,EAAD,KACI6C,GAASC,GACT,kBAAC9C,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,GAAD,CAAS4C,MAAOA,EAAOE,YA3BjB,WAClBiC,IAAaoG,WAAWjG,MAAK,SAAAC,GAC3B0F,EAAS1F,EAAIC,UAyB8CvC,MAAOA,EAAOE,YArBzD,SAACyI,GACnBzG,IAAahC,YAAY,CAACyI,QAASA,IAAUtG,MAAK,SAAAC,GAChD9B,EAAgB,uBAAwB,CACtC5D,QAAS,YAEXoL,EAAS1F,EAAIC,SACZC,OAAM,SAAAC,GACPC,QAAQC,IAAIF,WAkBR,kBAACvF,EAAA,EAAD,CAAK0B,QAAQ,OAAOgK,eAAe,SAAS7F,WAAW,SAASC,SAAU,IAAKF,UAAW,IAAK3F,GAAI,GACjG,kBAACF,EAAA,EAAD,CAAYlB,UAAWE,EAAQ6L,QAASlL,QAAQ,MAAhD","file":"static/js/10.cb63d2a1.chunk.js","sourcesContent":["import React from 'react';\r\n// import { useHistory } from 'react-router';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  // Button,\r\n  Grid,\r\n  Link,\r\n  // SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n// import {\r\n//   PlusCircle as PlusCircleIcon,\r\n//   Download as DownloadIcon,\r\n//   Upload as UploadIcon\r\n// } from 'react-feather';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  action: {\r\n    marginBottom: theme.spacing(1),\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  },\r\n  actionIcon: {\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Header({ className, ...rest }) {\r\n  const classes = useStyles();\r\n  // const history = useHistory();\r\n\r\n  return (\r\n    <Grid\r\n      className={clsx(classes.root, className)}\r\n      container\r\n      justify=\"space-between\"\r\n      spacing={3}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link variant=\"body1\" color=\"inherit\" to=\"#\" component={RouterLink}>\r\n            Dashboard\r\n          </Link>\r\n          <Link variant=\"body1\" color=\"inherit\" to=\"#\" component={RouterLink}>\r\n            Management\r\n          </Link>\r\n          <Typography variant=\"body1\" color=\"textPrimary\">\r\n            Account\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography variant=\"h3\" color=\"textPrimary\">\r\n          Setting\r\n        </Typography>\r\n        <Box mt={2}></Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","/* eslint-disable max-len */\r\nimport React,{useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { useSnackbar } from 'notistack';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Divider,\r\n  makeStyles,\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  Typography,\r\n  TextField,\r\n  FormHelperText,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  IconButton,\r\n  SvgIcon,\r\n} from '@material-ui/core';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Clipboard as ClipboardIcon,\r\n  Trash2 as DeleteIcon,\r\n} from 'react-feather';\r\nimport AdminService from 'src/services/AdminService';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport aws from 'aws-sdk';\r\nimport { promisify } from 'util';\r\nimport crypto from 'crypto';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  queryField: {\r\n    width: 500\r\n  },\r\n  bulkOperations: {\r\n    position: 'relative'\r\n  },\r\n  bulkActions: {\r\n    paddingLeft: 4,\r\n    paddingRight: 4,\r\n    marginTop: 6,\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: 2,\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  bulkAction: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  avatar: {\r\n    height: 42,\r\n    width: 42,\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  mailColor:{\r\n    textDecoration: 'none',\r\n    color: theme.palette.text.primary\r\n  },\r\n  appBar: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst config = {\r\n  region: 'eu-west-2',\r\n  accessKeyId: 'AKIAZOQGZVMVLILZ5JHS',\r\n  secretAccessKey: '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',\r\n  signatureVersion: 'v4',\r\n}\r\n\r\n\r\nfunction Results({ className, admin, staff, updateStaff, deleteStaff, ...rest }) {\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [GeneratedAccount, setGeneratedAccount] = React.useState(null);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [imageUpload, setImageUpload] = useState(null)\r\n  const randomBytes = promisify(crypto.randomBytes)\r\n  const s3 = new aws.S3(config)\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setImageUpload(null)\r\n    setValue(newValue);\r\n  };\r\n\r\n  const GenerateAccount = async () => {\r\n\r\n    if(imageUpload){\r\n\r\n      const rawBytes = await randomBytes(16)\r\n      const imageName = rawBytes.toString('hex')\r\n\r\n      const params = ({\r\n        Bucket: 'myfyapbucket',\r\n        Key: imageName,\r\n        Expires: 60\r\n      }) \r\n\r\n      const uploadUrl = await s3.getSignedUrlPromise('putObject', params)\r\n\r\n      await fetch(uploadUrl, {\r\n        method: 'PUT',\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        },\r\n        body: imageUpload\r\n      })\r\n\r\n      const imageUrl = uploadUrl.split('?')[0]\r\n\r\n      AdminService.generateAccount({profilePicture: imageUrl}).then(res => {\r\n        // console.log(res)\r\n        setGeneratedAccount(res.data)\r\n        updateStaff()\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }else{\r\n      enqueueSnackbar('Kindly Select a Profile Picture for the account', {\r\n        variant: 'error'\r\n      });\r\n    }\r\n  }\r\n  \r\n  \r\n  return (\r\n    <Card className={clsx(classes.root, className)} {...rest}>\r\n      <Divider />\r\n\r\n      <Box p={2} minHeight={56} display=\"flex\" alignItems=\"center\">\r\n        <Box flexGrow={1} />\r\n      </Box>\r\n\r\n      <PerfectScrollbar>\r\n        <Box className={classes.appBar} minWidth={700}>\r\n          <AppBar position=\"static\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n              <Tab label=\"Admin Info\" {...a11yProps(0)} />\r\n              <Tab label=\"Generate Account\" {...a11yProps(1)} />\r\n              <Tab label=\"Staff Accounts\" {...a11yProps(2)} />\r\n            </Tabs>\r\n          </AppBar>\r\n          <TabPanel value={value} index={0}>\r\n            <Formik\r\n              initialValues={{\r\n                username: admin?.username,\r\n                email: admin?.email,\r\n                firstName: admin?.firstName,\r\n                lastName: admin?.lastName,\r\n                password: ''\r\n              }}\r\n              validationSchema={Yup.object().shape({\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required(),\r\n                firstName: Yup.string().required(),\r\n                lastName: Yup.string().required(),\r\n              })}\r\n              onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                try {\r\n                  // Do api call\r\n                  setSubmitting(true);\r\n                  // console.log('Submitted Data: ', values);\r\n                  let imageUrl = '';\r\n\r\n                  if(imageUpload){\r\n\r\n                    let filename = admin.profilePicture.split('/').pop()\r\n\r\n                    if(filename !== ''){\r\n                      await s3.deleteObject({Bucket: 'myfyapbucket', Key: filename}).promise()\r\n                    }\r\n\r\n                    const rawBytes = await randomBytes(16)\r\n                    const imageName = rawBytes.toString('hex')\r\n\r\n                    const params = ({\r\n                      Bucket: 'myfyapbucket',\r\n                      Key: imageName,\r\n                      Expires: 60\r\n                    }) \r\n\r\n                    const uploadUrl = await s3.getSignedUrlPromise('putObject', params)\r\n\r\n                    await fetch(uploadUrl, {\r\n                      method: 'PUT',\r\n                      headers: {\r\n                        \"Content-Type\": \"multipart/form-data\"\r\n                      },\r\n                      body: imageUpload\r\n                    })\r\n\r\n                    imageUrl = uploadUrl.split('?')[0]\r\n                  }\r\n\r\n                  const newObject = {\r\n                    adminId: admin.id,\r\n                    username: values.username,\r\n                    email: values.email,\r\n                    firstName: values.firstName,\r\n                    lastName: values.lastName,\r\n                    password: values.password,\r\n                    profilePicture: imageUrl\r\n                  }\r\n\r\n                  if( values.username !== admin.username || values.email !== admin.email ||\r\n                      values.firstName !== admin.firstName || values.lastName !== admin.lastName ||\r\n                      values.password !== '' || imageUpload){\r\n                        \r\n                        AdminService.updateAdmin(newObject).then(res => {\r\n                          enqueueSnackbar('Profile Updated Successfully', {\r\n                            variant: 'success'\r\n                          });\r\n                          window.location.reload()\r\n                        }).catch(err => {\r\n                          console.log(err)\r\n                          enqueueSnackbar('Error While Updating Profile', {\r\n                            variant: 'error'\r\n                          });\r\n                        })\r\n                  }else{\r\n                    enqueueSnackbar('No Change Detected!', {\r\n                      variant: 'error'\r\n                    });\r\n                  }\r\n\r\n                  \r\n                } catch (err) {\r\n                  console.log(err)\r\n                  setSubmitting(false)\r\n                }\r\n              }}\r\n\r\n              \r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values\r\n              }) => (\r\n                <form\r\n                  onSubmit={handleSubmit}\r\n                  className={clsx(classes.root, className)}\r\n                  {...rest}\r\n                >\r\n                  <Box minWidth={600}  display=\"flex\">\r\n                    <Box minWidth={600} p={2}>\r\n                      <input accept=\"image/*\" onChange={(event) => { setImageUpload(event.target.files[0])}} className={classes.input} id=\"networkIcon\" type=\"file\" />\r\n                      <label htmlFor=\"networkIcon\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                          <PhotoCamera />\r\n                        </IconButton>\r\n                        {(imageUpload && imageUpload.name) || admin.profilePicture}\r\n                      </label>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Box minWidth={400}  display=\"flex\">\r\n                    <Box minWidth={400} p={2}>\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.username && errors.username\r\n                        )}\r\n                        helperText={touched.username && errors.username}\r\n                        fullWidth\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.username}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box minWidth={400} p={2}>\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.email && errors.email\r\n                        )}\r\n                        helperText={touched.email && errors.email}\r\n                        fullWidth\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Box minWidth={400}  display=\"flex\">\r\n                    <Box minWidth={400} p={2}>\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.firstName && errors.firstName\r\n                        )}\r\n                        helperText={touched.firstName && errors.firstName}\r\n                        fullWidth\r\n                        label=\"First Name\"\r\n                        name=\"firstName\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.firstName}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box minWidth={400} p={2}>\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.lastName && errors.lastName\r\n                        )}\r\n                        helperText={touched.lastName && errors.lastName}\r\n                        fullWidth\r\n                        label=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.lastName}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Box minWidth={400}  display=\"flex\">\r\n                    <Box minWidth={400} p={2}>\r\n                      <TextField\r\n                        error={Boolean(\r\n                          touched.password && errors.password\r\n                        )}\r\n                        helperText={touched.password && errors.password}\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                        variant=\"outlined\"\r\n                        placeholder='Your New Password'\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n                  {errors.submit && (\r\n                    <Box mt={3}>\r\n                      <FormHelperText error>{errors.submit}</FormHelperText>\r\n                    </Box>\r\n                  )}\r\n                  <Box p={2}>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      variant=\"contained\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1}>\r\n            {\r\n              GeneratedAccount && <Box p={2}>\r\n              <Typography>\r\n                Account Type: {GeneratedAccount.role}\r\n              </Typography>\r\n              <Typography>\r\n                Email: {GeneratedAccount.email}\r\n              </Typography>\r\n              <Typography>\r\n                password: {GeneratedAccount.orignalPass}\r\n              </Typography>\r\n\r\n              <Box p={2}>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  variant=\"outlined\"\r\n                  onClick={() => {\r\n                    navigator.clipboard.writeText(`${GeneratedAccount.email} ${GeneratedAccount.orignalPass}`)\r\n                    enqueueSnackbar('Copied To Clipboard', {\r\n                      variant: 'success'\r\n                    });\r\n                  }}\r\n                >\r\n                  Copy\r\n                </Button>\r\n              </Box>\r\n              </Box>\r\n            }\r\n\r\n            <Box minWidth={600}  display=\"flex\">\r\n              <Box minWidth={600} p={2}>\r\n                <input accept=\"image/*\" onChange={(event) => { setImageUpload(event.target.files[0])}} className={classes.input} id=\"networkIcon\" type=\"file\" />\r\n                <label htmlFor=\"networkIcon\">\r\n                  <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                    <PhotoCamera />\r\n                  </IconButton>\r\n                  {imageUpload && imageUpload.name}\r\n                </label>\r\n              </Box>\r\n            </Box>\r\n            \r\n            <Button\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              onClick={GenerateAccount}\r\n            >\r\n              Generate Account\r\n            </Button>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2}>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Email</TableCell>\r\n                <TableCell>Password</TableCell>\r\n                <TableCell>Account Type</TableCell>\r\n                <TableCell>Copy</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {staff.map((row) => (\r\n                <TableRow hover key={row?._id}>\r\n                  <TableCell>{row?.email}</TableCell>\r\n                  <TableCell>{row?.orignalPass}</TableCell>\r\n                  <TableCell>{row?.role}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton \r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(`${row?.email} ${row?.orignalPass}`)\r\n                      enqueueSnackbar('Copied To Clipboard', {\r\n                        variant: 'success'\r\n                      });\r\n                    }}>\r\n                      <SvgIcon fontSize=\"small\">\r\n                        <ClipboardIcon />\r\n                      </SvgIcon>\r\n                    </IconButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton onClick={() => {deleteStaff(row?._id)}}>\r\n                      <SvgIcon fontSize=\"small\">\r\n                        <DeleteIcon />\r\n                      </SvgIcon>\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          </TabPanel>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n    </Card>\r\n  );\r\n}\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  customers: PropTypes.array\r\n};\r\n\r\nResults.defaultProps = {\r\n  customers: []\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Container, makeStyles, Typography } from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport Header from './Header';\r\nimport Results from './Results';\r\nimport AdminService from 'src/services/AdminService'\r\nimport { useSnackbar } from 'notistack';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  },\r\n\r\n  textDiv: {\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\n\r\nfunction UserListView() {\r\n  const classes = useStyles();\r\n  const [staff, setStaff] = useState(null)\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const admin = useSelector(state => state.account.user);\r\n\r\n\r\n  useEffect(() => {\r\n    if(admin.role === 'Admin'){\r\n      AdminService.getStaff().then(res => {\r\n        setStaff(res.data)\r\n      })\r\n    }\r\n  }, [admin])\r\n\r\n  const updateStaff = () => {\r\n    AdminService.getStaff().then(res => {\r\n      setStaff(res.data)\r\n    })\r\n  }\r\n\r\n  const deleteStaff = (staffId) => {\r\n    AdminService.deleteStaff({staffId: staffId}).then(res => {\r\n      enqueueSnackbar('Deleted Successfully', {\r\n        variant: 'success'\r\n      });\r\n      setStaff(res.data)\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  \r\n\r\n  return (\r\n    <Page className={classes.root} title=\"MI - Settings\">\r\n      <Container maxWidth={false}>\r\n        <Header />\r\n        {\r\n          admin['role'] === 'Admin' ?\r\n          <Box>\r\n            {(admin && staff) && (\r\n              <Box mt={3}>\r\n                <Results admin={admin} updateStaff={updateStaff} staff={staff} deleteStaff={deleteStaff} />\r\n              </Box>\r\n            )}\r\n          </Box> : \r\n          <Box display='flex' justifyContent='center' alignItems='center' minWidth={700} minHeight={700} mt={3}>\r\n            <Typography className={classes.textDiv} variant='h3'>\r\n              Staff Account do not have access to this page\r\n            </Typography>\r\n          </Box>\r\n        }\r\n        \r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default UserListView;\r\n"],"sourceRoot":""}